1강.
루틴과 코루틴의 차이점
1) 코드 실행 관점
2) 메모리 관점

=을 통해 바디를 표현하기
fun add(a: Int, b: Int) = a + b

- runBlocking : 코루틴과 일반함수를 연결하는 함수
- suspend fun : 다른 suspend fun을 호출할 수 있다
- launch : 반환값이 없는 코루틴을 만드는 함수
- yield() : 지금 코루틴을 중단하고 다른 코루틴이 실행되도록 스레드를 양보한다.

2강.
스레드와 코루틴

- 프로세스
- 스레드 : 프로세스에 소속된다. 프로세스를 옮겨갈 수 없다. 프로세스가 있을 때에만 존재한다.
- 코루틴 : 코루틴이 가진 코드를 스레드에 넘겨서 실행하게 된다. 중단 후 재개 될 때 다른 스레드에 배정될 수 있다.
- context-switching : 코루틴은 하나의 스레드에서도 동시성을 확보할 수 있다.

3강.
코루틴 빌더(코루틴을 만드는 함수들)와 Job
코루틴은 어떻게 만드는가

- runBlocking : 새로운 코루틴을 만들고 루틴 세계와 코루틴 세계를 이어준다. 이 runBlocking으로 인해 만들어진 코루틴과 안에서 추가적으로 만들어진 코루틴이 다 완료 될 때까지 스레드를 블락시킨다.
: 프로그램에 진입할 때 최초로 작성하거나 테스트코드에서만 사용하는 게 좋다.
- delay : 코루틴을 이 시간만큼 멈추고 다른 코루틴에게 양보한다.
=> runBlocking안에 delay를 사용하면 스레드를 전체 blocking해버리기 때문에 양보 못함

- launch : 반환값이 없는 코루틴 코드를 실행한다. runBlocking안에서만 된다.
: start 옵션을 줄 수 있게 된다.
- val job : 코루틴을 제어할 수 있는 객체, start, cancle, join(job하나가 끝날때까지 기다리게 한다)

동시에 두 코루틴을 실행하면 어떻게 되는가 (이미지)
코루틴 코드 내부에 1초 대기를 주면, 각각의 대기는 1초이지만 전체 실행이 완료되기까지는 1.1초 정도 걸린다.

- async : launch와 유사한데 다른점은 주어진 함수의 실행 결과를 반환할 수 있다는 것이다. 여러 api를 동시에 호출하여 소요시간을 최소화.
: callback을 사용하지 않고 동기 방식으로 코드를 작성할 수 있다.
: 주의사항, async를 lazy 옵션과 함께 사용한다면 계산 결과를 계속 기다리게 된다.
- job.await : await은 async 함수의 결과를 가져오는 함수다.


4강.
코루틴의 취소

취소를 위해서는 협조가 필요한데
- 블럭 안에서 delay, yield같은 kotlinx.coroutines 패키지의 suspend 함수를 사용해야만 한다.
(이미지) 4:16
- 코루틴이 스스로 취소요청을 받은 걸 확인하여 CancellationException을 던진다
- isActive
- launch(Dispatchers.Default)


5강.
코루틴의 예외 처리와 Job의 상태 변화
- 루트 코루틴 만들기. (이미지 0:37)
- 새로운 루트 코루틴을 만들고 싶다면? > 새로운 영역을 만들어야 한다. >>> CorountineScope(Dispatchers.Default).launch // Dis~는 새로운 스레드르 배정해주는 역할을 한다. (2:00)

런치와 async의 에러 처리 차이점
- async를 사용한 루트 코루틴에서 예외가 발생하면  전파될 곳이 없어서 에러가 바로 출력되지 않고 (job.await을 써야함)
- runBlocking의 자식 코루틴으로서 async를 활용하면 예외가 부모에게 전파된다.
- async(SupervisorJob()) : 자식 코루틴의 예외를 부모에게 전파하고 싶지 않을 때

코루틴에서 예외를 다루는 법
(1) try - catch - finally
(2) CoroutinExceptionHandler : try - catch - finally와 달리 예외 발생 이후 에러 로깅 / 에러 메세지 전송 등에 활용한다 {코루틴구성요소(context), 발생한예외(throwable) }

